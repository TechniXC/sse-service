plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'technixc'
version '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('springDocVersion', "2.6.0")
    set('mapstructVersion', "1.5.2.Final")
    set('lombokVersion', "1.18.24")
    set('lombokMapstructBindingVersion', "0.2.0")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {

    //Base
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //Reactive for SSE
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'io.projectreactor.rabbitmq:reactor-rabbitmq:1.5.2'

    //Data
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Kafka
//    implementation 'org.springframework.kafka:spring-kafka'
//    implementation 'org.springframework.cloud:spring-cloud-stream'
//    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-reactive'

    // Observability
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:context-propagation'
    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //Logs
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'
    runtimeOnly 'com.github.loki4j:loki-logback-appender:1.3.2'

    // Docs
    implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springDocVersion}"

    // Boilerplate
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    //Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}



tasks.named('test') {
    useJUnitPlatform()
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
tasks.jar {
    enabled = false
}
